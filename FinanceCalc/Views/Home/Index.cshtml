@using Microsoft.AspNetCore.Identity
@model FinanceCalc.Models.DashboardViewModel

@{
    ViewData["Title"] = "Home";
    var expenses = Model.Expenses;
    var income = Model.Income;
    var savings = Model.Savings;
}

@if (User.Identity.IsAuthenticated)
{
    <p>
        <a asp-controller="Transactions" asp-action="Create">Create New</a>
    </p>

    <h3 class="mb-4">Overview</h3>

    <div style="display: flex; justify-content: space-around; gap: 2rem; flex-wrap: wrap;">

        <!-- Expenses Section -->
        <div style="flex: 1; min-width: 250px; max-width: 350px;">
            <h5>Expenses by Category</h5>
            <div style="flex-grow: 1; height: 300px; position: relative;">
                <canvas id="expenseChart" style="max-height: 100%; max-width: 100%;"></canvas>
            </div>

            <div style="display: flex; justify-content: flex-end; gap: 0.5rem; margin-top: 1rem;">
                <button class="btn btn-sm btn-outline-primary" type="button" onclick="toggleFilter('expenseFilter')">Filter</button>
                <button class="btn btn-sm btn-primary" type="button" onclick="openAddTransaction('Expense')">Add</button>
            </div>

            <div id="expenseFilter" style="display:none; margin-top:10px; text-align: left;">
                <div class="d-flex gap-2 mb-2">
                    <input type="date" id="expenseStartDate" class="form-control form-control-sm" />
                    <input type="date" id="expenseEndDate" class="form-control form-control-sm" />
                </div>
                <div>
                    <button class="btn btn-sm btn-primary me-1" onclick="filterExpenses()">Apply</button>
                    <button class="btn btn-sm btn-secondary" onclick="resetExpensesFilter()">Reset</button>
                </div>
            </div>

            <table class="table table-sm mt-3" id="expensesTable">
                <thead>
                    <tr><th>Date</th><th>Amount</th><th>Category</th></tr>
                </thead>
                <tbody>
                    @foreach (var item in expenses)
                    {
                        <tr data-date="@item.Date.ToString("yyyy-MM-dd")">
                            <td>@item.Date.ToShortDateString()</td>
                            <td>@item.Amount.ToString("C")</td>
                            <td>@item.ExpenseCategory</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Income vs Expenses Section -->
        <div style="flex: 1; min-width: 250px; max-width: 350px;">
            <h5>Income vs Expenses</h5>
            <div style="flex-grow: 1; height: 300px; position: relative;">
                <canvas id="incomeChart" style="max-height: 100%; max-width: 100%;"></canvas>
            </div>

            <div style="display: flex; justify-content: flex-end; gap: 0.5rem; margin-top: 1rem;">
                <button class="btn btn-sm btn-outline-primary" type="button" onclick="toggleFilter('incomeFilter')">Filter</button>
                <button class="btn btn-sm btn-primary" type="button" onclick="openAddTransaction('Income')">Add</button>
            </div>

            <div id="incomeFilter" style="display:none; margin-top:10px; text-align: left;">
                <!-- You can add income filters here if needed -->
            </div>

            <table class="table table-sm mt-3">
                <tbody>
                    <tr><th>Total Income</th><td>@((ViewBag.MonthlyIncome as decimal?)?.ToString("C") ?? "$0")</td></tr>
                    <tr><th>Total Expenses</th><td>@((ViewBag.IncomeVsExpenseData[0] as decimal?)?.ToString("C") ?? "$0")</td></tr>
                    <tr><th>Remaining</th><td>@((ViewBag.IncomeVsExpenseData[1] as decimal?)?.ToString("C") ?? "$0")</td></tr>
                </tbody>
            </table>
        </div>

        <!-- Savings Section -->
        <div style="flex: 1; min-width: 250px; max-width: 350px;">
            <h5>Savings</h5>
            <div style="flex-grow: 1; height: 300px; position: relative;">
                <canvas id="savingsChart" style="max-height: 100%; max-width: 100%;"></canvas>
            </div>

            <div style="display: flex; justify-content: flex-end; gap: 0.5rem; margin-top: 1rem;">
                <button class="btn btn-sm btn-outline-primary" type="button" onclick="toggleFilter('savingsFilter')">Filter</button>
                <button class="btn btn-sm btn-primary" type="button" onclick="openAddTransaction('Saving')">Add</button>
            </div>

            <div id="savingsFilter" style="display:none; margin-top:10px; text-align: left;">
                <div class="d-flex gap-2 mb-2">
                    <input type="date" id="savingsStartDate" class="form-control form-control-sm" />
                    <input type="date" id="savingsEndDate" class="form-control form-control-sm" />
                </div>
                <div>
                    <button class="btn btn-sm btn-primary me-1" onclick="filterSavings()">Apply</button>
                    <button class="btn btn-sm btn-secondary" onclick="resetSavingsFilter()">Reset</button>
                </div>
            </div>

            <table class="table table-sm mt-3" id="savingsTable">
                <thead>
                    <tr><th>Date</th><th>Amount</th></tr>
                </thead>
                <tbody>
                    @foreach (var item in savings)
                    {
                        <tr data-date="@item.Date.ToString("yyyy-MM-dd")">
                            <td>@item.Date.ToShortDateString()</td>
                            <td>@item.Amount.ToString("C")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

    </div>

    <!-- All Transactions -->
    <h4 class="mt-5">All Transactions</h4>
    <table class="table mt-3">
        <thead>
            <tr>
                <th>@Html.DisplayNameFor(model => model.AllTransactions.First().Date)</th>
                <th>@Html.DisplayNameFor(model => model.AllTransactions.First().Amount)</th>
                <th>@Html.DisplayNameFor(model => model.AllTransactions.First().ExpenseCategory)</th>
                <th>@Html.DisplayNameFor(model => model.AllTransactions.First().Type)</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.AllTransactions)
            {
                <tr>
                    <td>@item.Date.ToShortDateString()</td>
                    <td>@item.Amount.ToString("C")</td>
                    <td>@item.ExpenseCategory</td>
                    <td>@item.Type</td>
                    <td>
                        <a asp-controller="Transactions" asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                        <a asp-controller="Transactions" asp-action="Details" asp-route-id="@item.Id">Details</a> |
                        <a asp-controller="Transactions" asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Please explore our app and consider signing up to track your expenses!</p>
}

@section Scripts {
    @if (User.Identity.IsAuthenticated)
    {
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script>
            function openAddTransaction(type) {
                window.location.href = '@Url.Action("Create", "Transactions")' + '?type=' + type;
            }

            document.addEventListener("DOMContentLoaded", function () {
                const fadeIn = (id) => {
                    const el = document.getElementById(id);
                    if (el) {
                        el.style.opacity = '1';
                        el.style.transform = 'translateY(0)';
                    }
                };

                fadeIn("expenseChart");
                fadeIn("incomeChart");
                fadeIn("savingsChart");

                // Expense Chart
                const expenseCtx = document.getElementById('expenseChart').getContext('2d');
                new Chart(expenseCtx, {
                    type: 'doughnut',
                    data: {
                        labels: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.Labels)),
                        datasets: [{
                            label: 'Expenses by Category',
                            data: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.Data)),
                            backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'],
                            hoverOffset: 10
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        animation: {
                            animateScale: true,
                            animateRotate: true,
                            duration: 1200,
                            easing: 'easeOutBounce'
                        },
                        plugins: {
                            legend: {
                                position: 'bottom'
                            }
                        }
                    }
                });

                // Income vs Expenses Chart
                const incomeCtx = document.getElementById('incomeChart').getContext('2d');
                new Chart(incomeCtx, {
                    type: 'doughnut',
                    data: {
                        labels: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.IncomeVsExpenseLabels)),
                        datasets: [{
                            data: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.IncomeVsExpenseData)),
                            backgroundColor: ['#e74c3c', '#2ecc71'],
                            hoverOffset: 10
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        cutout: '70%',
                        plugins: {
                            legend: {
                                position: 'bottom'
                            },
                            tooltip: {
                                callbacks: {
                                    label: function (context) {
                                        const label = context.label || '';
                                        const value = context.raw || 0;
                                        return `${label}: $${value.toFixed(2)}`;
                                    }
                                }
                            }
                        }
                    }
                });

                // Savings Chart
                const savingsAmount = @ViewBag.Savings ?? 0;
                const savingsCtx = document.getElementById('savingsChart').getContext('2d');
                new Chart(savingsCtx, {
                    type: 'doughnut',
                    data: {
                        labels: ['Savings'],
                        datasets: [{
                            data: [savingsAmount],
                            backgroundColor: ['#17a2b8'],
                            hoverOffset: 10
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        cutout: '70%',
                        plugins: {
                            legend: { display: false }
                        }
                    }
                });
            });

            // Toggle filter visibility
            function toggleFilter(filterId) {
                const filterDiv = document.getElementById(filterId);
                filterDiv.style.display = (filterDiv.style.display === "none" || filterDiv.style.display === "") ? "block" : "none";
            }

            function filterTableByDate(tableId, startDateId, endDateId) {
                const startDateInput = document.getElementById(startDateId);
                const endDateInput = document.getElementById(endDateId);
                const startDate = startDateInput.value ? new Date(startDateInput.value) : null;
                const endDate = endDateInput.value ? new Date(endDateInput.value) : null;
                const table = document.getElementById(tableId);
                if (!table) return;

                for (const row of table.tBodies[0].rows) {
                    const rowDateStr = row.getAttribute('data-date');
                    if (!rowDateStr) continue;

                    const rowDate = new Date(rowDateStr);
                    let visible = true;

                    if (startDate && rowDate < startDate) visible = false;
                    if (endDate && rowDate > endDate) visible = false;

                    row.style.display = visible ? '' : 'none';
                }
            }

            function filterExpenses() {
                filterTableByDate('expensesTable', 'expenseStartDate', 'expenseEndDate');
            }
            function resetExpensesFilter() {
                document.getElementById('expenseStartDate').value = '';
                document.getElementById('expenseEndDate').value = '';
                filterExpenses();
            }

            function filterSavings() {
                filterTableByDate('savingsTable', 'savingsStartDate', 'savingsEndDate');
            }
            function resetSavingsFilter() {
                document.getElementById('savingsStartDate').value = '';
                document.getElementById('savingsEndDate').value = '';
                filterSavings();
            }
        </script>
    }
}

@using Microsoft.AspNetCore.Identity
@model FinanceCalc.Models.DashboardViewModel

@{
    ViewData["Title"] = "Home";
    var expenses = Model.Expenses;
    var income = Model.Income;
    var savings = Model.Savings;
}

@if (User.Identity.IsAuthenticated)
{
    <h3 class="mb-4">Overview</h3>
    <div class="mb-3 text-end dropdown">
    <button class="btn btn-outline-dark dropdown-toggle" type="button" id="exportDropdown" data-bs-toggle="dropdown" aria-expanded="false">
        <i class="fas fa-download"></i> Export
    </button>
    <ul class="dropdown-menu" aria-labelledby="exportDropdown">
        <li>
            <a class="dropdown-item" asp-controller="Transactions" asp-action="ExportToPdf">
                <i class="fas fa-file-pdf text-danger"></i> Export to PDF
            </a>
        </li>
        <li>
            <a class="dropdown-item" asp-controller="Transactions" asp-action="ExportToExcel">
                <i class="fas fa-file-excel text-success"></i> Export to Excel
            </a>
        </li>
        <li>
            <a class="dropdown-item" asp-controller="Transactions" asp-action="ExportToCsv">
                <i class="fas fa-file-csv text-primary"></i> Export to CSV
            </a>
        </li>
    </ul>
</div>

    <div style="display: flex; justify-content: space-around; gap: 2rem; flex-wrap: wrap;">

        <!-- Expenses Section -->
        <div class="card shadow rounded-4 p-3 mb-4" style="min-width: 280px; flex: 1; max-width: 360px;">
            <h5 class="text-center fw-semibold mb-3">Expenses by Category</h5>

            <div style="height: 240px; position: relative;">
                <canvas id="expenseChart" class="w-100 h-100"></canvas>
            </div>

            <div class="d-flex justify-content-end gap-2 mt-3">
                <button class="btn btn-sm btn-outline-primary" onclick="toggleFilter('expenseFilter')">Filter</button>
                <button class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#addExpenseModal">Add Expense</button>
            </div>

            <div id="expenseFilter" class="mt-2" style="display:none;">
                <div class="d-flex gap-2 mb-2">
                    <input type="date" id="expenseStartDate" class="form-control form-control-sm" />
                    <input type="date" id="expenseEndDate" class="form-control form-control-sm" />
                </div>
                <div>
                    <button class="btn btn-sm btn-primary me-1" onclick="filterExpenses()">Apply</button>
                    <button class="btn btn-sm btn-secondary" onclick="resetExpensesFilter()">Reset</button>
                </div>
            </div>

            <table class="table table-sm table-hover" id="expensesTable">
                
                <tbody>
                    @foreach (var item in Model.Expenses)
                    {
                        <tr data-date="@item.Date.ToString("yyyy-MM-dd")">
                            <td><strong>@item.Amount.ToString("C")</strong></td>
                             <td>@item.Category</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <!-- Add Expense Modal -->
        <div class="modal fade" id="addExpenseModal" tabindex="-1" aria-labelledby="addExpenseModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <form id="addExpenseForm" onsubmit="submitExpense(event)">
                        <div class="modal-header">
                            <h5 class="modal-title" id="addExpenseModalLabel">Add Expense</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="mb-3">
                                <label for="expenseAmount" class="form-label">Amount</label>
                                <input type="number" step="0.01" class="form-control" id="expenseAmount" required>
                            </div>
                            <div class="mb-3">
                                <label for="expenseCategory" class="form-label">Category</label>
                                <select class="form-select" id="expenseCategory" required>
                                    <option value="" disabled selected>Select category</option>
                                    <!-- Add your expense categories here or dynamically -->
                                    <option>Food</option>
                                    <option>Transportation</option>
                                    <option>Utilities</option>
                                    <option>Entertainment</option>
                                    <option>Health & Medical</option>
                                    <option>Housing</option>
                                    <option>Education</option>
                                    <option>Personal Care</option>
                                    <option>Clothing</option>
                                    <option>Travel</option>
                                    <option>Gifts & Donations</option>
                                    <option>Insurance</option>
                                    <option>Subscriptions</option>
                                    <option>Phone & Internet</option>
                                    <option>Home Maintenance</option>
                                    <option>Childcare</option>
                                    <option>Pet Care</option>
                                    <option>Taxes</option>
                                    <option>Bank Fees</option>
                                    <option>Loan Payments</option>
                                    <option>Fuel</option>
                                    <option>Parking & Tolls</option>
                                    <option>Office Supplies</option>
                                    <option>Dining Out</option>
                                    <option>Gym & Fitness</option>
                                    <option>Beauty & Grooming</option>
                                    <option>Hobbies</option>
                                    <option>Miscellaneous</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="expenseDate" class="form-label">Date</label>
                                <input type="date" class="form-control" id="expenseDate" required>
                            </div>
                            <div class="mb-3">
                                <label for="expenseNote" class="form-label">Note (optional)</label>
                                <textarea class="form-control" id="expenseNote" rows="2"></textarea>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary">Add Expense</button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Income vs Expenses Section -->
        <div class="card shadow rounded-4 p-3 mb-4" style="min-width: 280px; flex: 1; max-width: 360px;">
            <h5 class="text-center fw-semibold mb-3">Income vs Expenses</h5>

            <div style="height: 240px; position: relative;">
                <canvas id="incomeChart" class="w-100 h-100"></canvas>
            </div>

            <div class="d-flex justify-content-end gap-2 mt-3">
                <button class="btn btn-sm btn-outline-primary" type="button" onclick="toggleFilter('incomeFilter')">Filter</button>
                <button class="btn btn-sm btn-primary" type="button" onclick="openAddTransaction('Income')">Add Income</button>
            </div>

            <div id="incomeFilter" class="mt-2" style="display:none; text-align: left;">
                <!-- Income filters go here if needed -->
            </div>

            <table class="table table-sm table-hover mt-3">
                <tbody>
                    <tr>
                        <th>Total Income</th>
                        <td class="text-success fw-bold">
                            @((ViewBag.MonthlyIncome as decimal?)?.ToString("C") ?? "$0")
                        </td>
                    </tr>
                    <tr>
                        <th>Total Expenses</th>
                        <td class="text-danger fw-bold">
                            @((ViewBag.IncomeVsExpenseData[0] as decimal?)?.ToString("C") ?? "$0")
                        </td>
                    </tr>
                    <tr>
                        <th>Remaining</th>
                        <td class="text-success  fw-bold">
                            @((ViewBag.IncomeVsExpenseData[1] as decimal?)?.ToString("C") ?? "$0")
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <!-- Savings Section -->
        <div class="card shadow rounded-4 p-3 mb-4" style="min-width: 280px; flex: 1; max-width: 360px;">
            <h5 class="text-center fw-semibold mb-3">Savings</h5>

            <div style="height: 240px; position: relative;">
                <canvas id="savingsChart" class="w-100 h-100"></canvas>
            </div>

            <div class="d-flex justify-content-end gap-2 mt-3">
                <button class="btn btn-sm btn-outline-primary" type="button" onclick="toggleFilter('savingsFilter')">Filter</button>
                <button class="btn btn-sm btn-primary" type="button" onclick="openAddTransaction('Saving')">Add Savings</button>
            </div>

            <div id="savingsFilter" class="mt-2" style="display:none; text-align: left;">
                <div class="d-flex gap-2 mb-2">
                    <input type="date" id="savingsStartDate" class="form-control form-control-sm" />
                    <input type="date" id="savingsEndDate" class="form-control form-control-sm" />
                </div>
                <div>
                    <button class="btn btn-sm btn-primary me-1" onclick="filterSavings()">Apply</button>
                    <button class="btn btn-sm btn-secondary" onclick="resetSavingsFilter()">Reset</button>
                </div>
            </div>

            <table class="table table-sm table-hover mt-3" id="savingsTable">
              
                <tbody>
                    @foreach (var item in savings)
                    {
                        <tr data-date="@item.Date.ToString("yyyy-MM-dd")">
                            <td>@item.Date.ToShortDateString()</td>
                            <td>@item.Amount.ToString("C")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

    </div>

    <!-- All Transactions -->
    <h4 class="mt-5">All Transactions</h4>

    <div class="transaction-list d-flex flex-column gap-3">
        @foreach (var item in Model.AllTransactions)
        {
            <div class="transaction-card d-flex justify-content-between align-items-center shadow-sm p-3 rounded" style="background-color: white;">
                <div class="d-flex align-items-center gap-3">
                    <div class="icon bg-light rounded-circle p-2">
                        <i class="bi bi-cash-stack fs-4 text-dark"></i>
                    </div>
                    <div>
                        <strong>@(item.Category ?? item.Type.ToString())</strong><br />
                        <small class="text-muted">@item.Type</small>
                    </div>
                </div>
                <div class="text-end">
                    <strong>@item.Amount.ToString("C")</strong><br />
                    <small class="text-muted">@item.Date.ToString("MMM d, yyyy")</small>
                </div>
            </div>
        }
    </div>
}
else
{
    <section class="container py-5" style="background-color: #FFFFFF;">

        <!-- Hero Section - White Background -->
        <section id="hero" class="hero-section d-flex align-items-center py-5 mb-5" style="min-height: 400px; background-color: #FFFFFF;">
            <div class="container d-flex flex-column flex-lg-row align-items-center gap-4">
                <!-- Text Content -->
                <div class="hero-text flex-lg-1 text-center text-lg-start" style="opacity: 0; transform: translateY(20px); transition: opacity 1s ease, transform 1s ease;">
                    <h1 class="display-4 fw-bold mb-3" style="color: #212529;">
                        Manage Your Money <br /> Effortlessly & Confidently
                    </h1>
                    <p class="lead" style="color: #6C757D; max-width: 480px; margin: 0 auto 1.5rem;">
                        Track your income, expenses, and savings all in one secure place. Start building your financial future today!
                    </p>
                    <div class="mt-4 d-flex justify-content-center">
                        <a href="/signup" class="btn btn-primary btn-lg px-5 py-3 shadow rounded-pill">
                            Get Started Free
                        </a>
                    </div>
                </div>

                <!-- Illustration -->
                <div class="hero-image flex-lg-1" style="opacity: 0; transform: translateY(20px); transition: opacity 1s ease 0.3s, transform 1s ease 0.3s;">
                    <img src="/images/8432.jpg" alt="Finance illustration" style="max-width: 100%; height: auto; max-height: 350px;" />
                </div>
            </div>
        </section>

        <!-- Intro for Features + Feature Cards + CTA Button - Baby Purple Background -->
        <section style="background-color: #F3E8FF; padding: 3rem 1rem; border-radius: 12px; margin-bottom: 3rem; text-align: center;">
            <h2 class="fw-bold mb-2" style="color: #212529;">Take Control of Your Finances</h2>
            <p class="fs-5 mx-auto" style="color: #3C1361; max-width: 600px; margin-bottom: 2rem;">
                Join thousands who manage their money effortlessly — track expenses, budgets, and savings all in one place.
            </p>

            <!-- Feature Section inside same purple block -->
            <div class="feature-section d-flex flex-wrap gap-4 justify-content-center text-center mb-4">
                <div class="feature-card p-4 shadow rounded-4 bg-white" style="max-width: 320px; flex: 1 1 300px;">
                    <div class="feature-icon icon-green mb-3">
                        <i class="bi bi-compass-fill fs-1 text-white"></i>
                    </div>
                    <h5 class="fw-semibold" style="color: #212529;">Have Perfect Control</h5>
                    <p style="color: #6C757D;">Over all your cash expenses, bank accounts, E-Wallets, and crypto wallets.</p>
                </div>

                <div class="feature-card p-4 shadow rounded-4 bg-white" style="max-width: 320px; flex: 1 1 300px;">
                    <div class="feature-icon icon-pink mb-3">
                        <i class="bi bi-pie-chart-fill fs-1 text-white"></i>
                    </div>
                    <h5 class="fw-semibold" style="color: #212529;">Get a Quick Overview</h5>
                    <p style="color: #6C757D;">About your total incomes and expenses at a glance and in one place.</p>
                </div>

                <div class="feature-card p-4 shadow rounded-4 bg-white" style="max-width: 320px; flex: 1 1 300px;">
                    <div class="feature-icon icon-blue mb-3">
                        <i class="bi bi-cash-stack fs-1 text-white"></i>
                    </div>
                    <h5 class="fw-semibold" style="color: #212529;">Use Our Smart Budgets</h5>
                    <p style="color: #6C757D;">To save money for a new car, dreamy vacation, or top university.</p>
                </div>
            </div>

            <!-- Get Started Free Button inside purple block -->
            <a href="/signup" class="btn btn-lg btn-primary px-5 shadow-lg" style="border-radius: 2rem;">
                Get Started Free
            </a>
        </section>

        <!-- Articles Section - Baby Purple Background -->
        <section class="articles-section text-center" style="background-color: #F3E8FF; padding: 3rem 1rem; border-radius: 12px;">
            <h3 class="mb-3 fw-semibold" style="color: #212529;">Explore Our Latest Articles</h3>
            <p style="color: #6C757D; max-width: 600px; margin: 0 auto 1.5rem;">
                Learn smart money habits and tips to make your finances work for you.
            </p>

            <div class="d-flex flex-wrap justify-content-center gap-4">

                <a href="/articles/article1" class="text-decoration-none" style="max-width: 280px; flex: 1;">
                    <div class="card h-100 overflow-hidden shadow-sm"
                         style="border: 2px solid #cbd5e1; border-radius: 1.5rem; transition: transform 0.3s ease-in-out; padding: 1.25rem 0;">
                        <img src="/images/saving-home.png" alt="Saving Guide Preview"
                             class="w-100"
                             style="height: 220px; object-fit: cover; border-top-left-radius: 1.5rem; border-top-right-radius: 1.5rem;" />
                        <div class="card-body px-4 pt-4 pb-4">
                            <h5 class="fw-semibold mb-3" style="color: #212529;">5 Easy Ways to Start Saving Today</h5>
                            <p class="small mb-3" style="color: #212529;">Simple strategies to help you save money fast — even on a tight budget.</p>
                            <span class="btn btn-sm btn-outline-primary rounded-pill px-3">Read More</span>
                        </div>
                    </div>
                </a>

                <a href="/articles/article2" class="text-decoration-none" style="max-width: 280px; flex: 1;">
                    <div class="card h-100 overflow-hidden shadow-sm"
                         style="border: 2px solid #cbd5e1; border-radius: 1.5rem; transition: transform 0.3s ease-in-out; padding: 1.25rem 0;">
                        <img src="/images/emergency-fund-home.png" alt="Emergency Fund Preview"
                             class="w-100"
                             style="height: 200px; object-fit: cover; border-top-left-radius: 1.5rem; border-top-right-radius: 1.5rem;" />
                        <div class="card-body px-4 pt-4 pb-4">
                            <h5 class="fw-semibold mb-3" style="color: #212529;">How to Build an Emergency Fund That Works</h5>
                            <p class="small mb-3" style="color: #212529;">Learn how to protect yourself from financial surprises with a strong emergency fund.</p>
                            <span class="btn btn-sm btn-outline-primary rounded-pill px-3">Read More</span>
                        </div>
                    </div>
                </a>

                <a href="/articles/article3" class="text-decoration-none" style="max-width: 280px; flex: 1;">
                    <div class="card h-100 overflow-hidden shadow-sm"
                         style="border: 2px solid #cbd5e1; border-radius: 1.5rem; transition: transform 0.3s ease-in-out; padding: 1.25rem 0;">
                        <img src="/images/saving-guide-home.png" alt="Saving Guide Preview"
                             class="w-100"
                             style="height: 180px; object-fit: cover; border-top-left-radius: 1.5rem; border-top-right-radius: 1.5rem;" />
                        <div class="card-body px-4 pt-4 pb-4">
                            <h5 class="fw-semibold mb-3" style="color: #212529;">Master Your Money</h5>
                            <p class="small mb-3" style="color: #212529;">A beginner’s guide to budgeting, saving, and taking control of your finances.</p>
                            <span class="btn btn-sm btn-outline-primary rounded-pill px-3">Read More</span>
                        </div>
                    </div>
                </a>

            </div>
        </section>

    </section>
    <section style="background-color: #FFFFFF; padding: 3rem 1rem; border-radius: 12px; max-width: 900px; margin: 0 auto 3rem; text-align: center;">
        <h2 class="fw-bold mb-4" style="color: #212529;">What Our Users Say</h2>
        <div class="d-flex flex-wrap justify-content-center gap-4">
            <div class="p-4 shadow rounded-4" style="max-width: 280px; flex: 1; border-radius:  1.5rem; background: #F9F9F9; border: 2px solid #6C63FF;">
                <div class="mb-2" style="color: #FFC107;">
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star"></i>
                </div>
                <p style="color: #3C1361; font-style: italic;">"Managing my finances has never been easier. The budgeting tools helped me save for my dream vacation!"</p>
                <strong style="color: #3C1361;">– Sarah M.</strong>
            </div>
            <div class="p-4 shadow rounded-4" style="max-width: 280px; flex: 1; border-radius:  1.5rem; background: #F9F9F9; border: 2px solid #6C63FF;">
                <div class="mb-2" style="color: #FFC107;">
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star-half-alt"></i>
                </div>
                <p style="color: #3C1361; font-style: italic;">"The all-in-one dashboard makes tracking crypto and bank accounts so simple."</p>
                <strong style="color: #3C1361;">– James T.</strong>
            </div>
            <div class="p-4 shadow rounded-4" style="max-width: 280px; flex: 1; border-radius:  1.5rem; background: #F9F9F9; border: 2px solid #6C63FF;">
                <div class="mb-2" style="color: #FFC107;">
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star"></i>
                </div>
                <p style="color: #3C1361; font-style: italic;">"Smart budgets helped me save money for university fees with zero stress."</p>
                <strong style="color: #3C1361;">– Priya K.</strong>
            </div>
        </div>
    </section>

    <style>
        .card:hover {
            transform: scale(1.03);
            box-shadow: 0 0.75rem 1.5rem rgba(44, 123, 229, 0.25);
            transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
        }
    </style>

    <script>
        // Simple fade-in animation for hero text and image
        window.addEventListener('DOMContentLoaded', () => {
            const heroText = document.querySelector('.hero-text');
            const heroImage = document.querySelector('.hero-image');

            if (heroText && heroImage) {
                heroText.style.opacity = '1';
                heroText.style.transform = 'translateY(0)';
                heroImage.style.opacity = '1';
                heroImage.style.transform = 'translateY(0)';
            }
        });
    </script>
}







@section Scripts {
    @if (User.Identity.IsAuthenticated)
    {
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script>

            let expenseChart;
            // Run when DOM is fully loaded
            document.addEventListener("DOMContentLoaded", function () {

                // Fade in charts by changing opacity and translateY
                const fadeIn = (id) => {
                    const el = document.getElementById(id);
                    if (el) {
                        el.style.opacity = '1';
                        el.style.transform = 'translateY(0)';
                    }
                };
                fadeIn("expenseChart");
                fadeIn("incomeChart");
                fadeIn("savingsChart");

                // ---------------------------
                // Expense Chart Initialization
                // ---------------------------
                const expenseCtx = document.getElementById('expenseChart').getContext('2d');
                expenseChart = new Chart(expenseCtx, {

                    type: 'doughnut',
                    data: {
                        labels: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.Labels)),
                        datasets: [{
                            label: 'Expenses by Category',
                            data: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.Data)),
                            backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'],
                            hoverOffset: 10
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        animation: {
                            animateScale: true,
                            animateRotate: true,
                            duration: 1200,
                            easing: 'easeOutBounce'
                        },
                        plugins: {
                            legend: { position: 'bottom' }
                        }
                    }
                });

                // ---------------------------
                // Handle Submit of Add Expense form via AJAX
                // ---------------------------
                async function submitExpense(event) {
                    event.preventDefault();

                    // Read form input values
                    const amount = parseFloat(document.getElementById('expenseAmount').value);
                    const category = document.getElementById('expenseCategory').value;
                    const date = document.getElementById('expenseDate').value;
                    const description = document.getElementById('expenseNote').value;

                    // Basic validation
                    if (!amount || !category || !date) {
                        alert('Please fill all required fields.');
                        return;
                    }

                    // Prepare data object matching the Transaction model (server expects PascalCase)
                    const data = {
                        Amount: amount,
                        Category: category,
                        Date: date,
                        Description: description
                    };

                    try {
                        // Send POST request to your controller action
                        const response = await fetch('/Transactions/AddExpense', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(data)
                        });

                        if (!response.ok) {
                            alert('Failed to save expense.');
                            return;
                        }

                        const result = await response.json();
                        console.log(result);


                        if (result.success) {
                            // Close the modal after successful save
                            const modal = bootstrap.Modal.getInstance(document.getElementById('addExpenseModal'));
                            modal.hide();

                            // Reset the form inputs
                            document.getElementById('addExpenseForm').reset();

                            // Add the new expense row dynamically to the table
                            addExpenseRow(result);
                            updateExpenseChart(result);

                        } else {
                            alert('Failed to save expense.');
                        }
                    } catch (error) {
                        alert('Unexpected error: ' + error.message);
                    }
                }

                function updateExpenseChart(expense) {
                    const category = expense.Category;
                    const amount = parseFloat(expense.Amount);
                    const chartLabels = expenseChart.data.labels;
                    const chartData = expenseChart.data.datasets[0].data;

                    const existingIndex = chartLabels.indexOf(category);

                    if (existingIndex !== -1) {
                        chartData[existingIndex] += amount;
                    } else {
                        chartLabels.push(category);
                        chartData.push(amount);
                        expenseChart.data.datasets[0].backgroundColor.push(getRandomColor());
                    }

                    expenseChart.update();
                }

                function getRandomColor() {
                    const hue = Math.floor(Math.random() * 360);
                    return `hsl(${hue}, 70%, 70%)`;
                }


                // Attach submitExpense as the handler for form submission
                const addExpenseForm = document.getElementById('addExpenseForm');
                if (addExpenseForm) {
                    addExpenseForm.addEventListener('submit', submitExpense);
                }

                // ---------------------------
                // Dynamically add a new expense row to the expenses table
                // ---------------------------
                function addExpenseRow(expense) {
                    const tbody = document.querySelector('#expensesTable tbody');
                    if (!tbody) return;

                    const tr = document.createElement('tr');
                    tr.setAttribute('data-date', expense.Date);

                    const tdAmount = document.createElement('td');
                    tdAmount.innerHTML = `<strong>${expense.Amount}</strong>`;

                    const tdCategory = document.createElement('td');
                    tdCategory.textContent = expense.Category;

                    tr.appendChild(tdAmount);
                    tr.appendChild(tdCategory);

                    tbody.appendChild(tr);
                    
                }

                // ---------------------------
                // Income vs Expenses Chart Initialization
                // ---------------------------
                const incomeCtx = document.getElementById('incomeChart').getContext('2d');
                new Chart(incomeCtx, {
                    type: 'doughnut',
                    data: {
                        labels: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.IncomeVsExpenseLabels)),
                        datasets: [{
                            data: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.IncomeVsExpenseData)),
                            backgroundColor: ['#e74c3c', '#2ecc71'],
                            hoverOffset: 10
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        cutout: '70%',
                        plugins: {
                            legend: { position: 'bottom' },
                            tooltip: {
                                callbacks: {
                                    label: function (context) {
                                        const label = context.label || '';
                                        const value = context.raw || 0;
                                        return `${label}: $${value.toFixed(2)}`;
                                    }
                                }
                            }
                        }
                    }
                });

                // ---------------------------
                // Savings Chart Initialization
                // ---------------------------
                const savingsAmount = @ViewBag.Savings ?? 0;
                const savingsCtx = document.getElementById('savingsChart').getContext('2d');
                new Chart(savingsCtx, {
                    type: 'doughnut',
                    data: {
                        labels: ['Savings'],
                        datasets: [{
                            data: [savingsAmount],
                            backgroundColor: ['#17a2b8'],
                            hoverOffset: 10
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        cutout: '70%',
                        plugins: { legend: { display: false } }
                    }
                });
            });

            // ---------------------------
            // Toggle visibility of filters by ID
            // ---------------------------
            function toggleFilter(filterId) {
                const filterDiv = document.getElementById(filterId);
                filterDiv.style.display = (filterDiv.style.display === "none" || filterDiv.style.display === "") ? "block" : "none";
            }

            // ---------------------------
            // Filter table rows by date range based on input IDs
            // ---------------------------
            function filterTableByDate(tableId, startDateId, endDateId) {
                const startDateInput = document.getElementById(startDateId);
                const endDateInput = document.getElementById(endDateId);
                const startDate = startDateInput.value ? new Date(startDateInput.value) : null;
                const endDate = endDateInput.value ? new Date(endDateInput.value) : null;
                const table = document.getElementById(tableId);
                if (!table) return;

                for (const row of table.tBodies[0].rows) {
                    const rowDateStr = row.getAttribute('data-date');
                    if (!rowDateStr) continue;

                    const rowDate = new Date(rowDateStr);
                    let visible = true;

                    if (startDate && rowDate < startDate) visible = false;
                    if (endDate && rowDate > endDate) visible = false;

                    row.style.display = visible ? '' : 'none';
                }
            }

            // ---------------------------
            // Filter functions for expenses
            // ---------------------------
            function filterExpenses() {
                filterTableByDate('expensesTable', 'expenseStartDate', 'expenseEndDate');
            }
            function resetExpensesFilter() {
                document.getElementById('expenseStartDate').value = '';
                document.getElementById('expenseEndDate').value = '';
                filterExpenses();
            }

            // ---------------------------
            // Filter functions for savings
            // ---------------------------
            function filterSavings() {
                filterTableByDate('savingsTable', 'savingsStartDate', 'savingsEndDate');
            }
            function resetSavingsFilter() {
                document.getElementById('savingsStartDate').value = '';
                document.getElementById('savingsEndDate').value = '';
                filterSavings();
            }
        </script>
    }
}

